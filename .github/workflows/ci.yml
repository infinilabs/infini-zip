name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-cpp:
    name: Build C++ Wrapper
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Build C++ wrapper
      run: |
        cd cpp_benchmark
        ./build.sh
    - name: Upload C++ wrapper
      uses: actions/upload-artifact@v3
      with:
        name: cpp-wrapper
        path: cpp_benchmark/libtopling_zip_wrapper.so

  test:
    name: Test Suite
    needs: build-cpp
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by testing beta only on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download C++ wrapper
      if: matrix.os == 'ubuntu-latest'
      uses: actions/download-artifact@v3
      with:
        name: cpp-wrapper
        path: cpp_benchmark

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Build with all features
      run: cargo build --all-features --verbose

    - name: Run tests
      if: matrix.os == 'ubuntu-latest'
      env:
        LD_LIBRARY_PATH: ${{ github.workspace }}/cpp_benchmark
      run: cargo test --verbose
    - name: Run tests
      if: matrix.os != 'ubuntu-latest'
      run: cargo test --verbose

    - name: Run tests with all features
      if: matrix.os == 'ubuntu-latest'
      env:
        LD_LIBRARY_PATH: ${{ github.workspace }}/cpp_benchmark
      run: cargo test --all-features --verbose
    - name: Run tests with all features
      if: matrix.os != 'ubuntu-latest'
      run: cargo test --all-features --verbose

    - name: Run doc tests
      run: cargo test --doc

  bench:
    name: Benchmarks
    needs: build-cpp
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download C++ wrapper
      uses: actions/download-artifact@v3
      with:
        name: cpp-wrapper
        path: cpp_benchmark

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks (compile only)
      env:
        LD_LIBRARY_PATH: ${{ github.workspace }}/cpp_benchmark
      run: cargo bench --no-run

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 240 --out xml --test-threads 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: cobertura.xml
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      run: cargo audit

  minimal-versions:
    name: Minimal Dependency Versions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-minimal-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-minimal-versions
      run: cargo install cargo-minimal-versions && cargo install cargo-hack

    - name: Check minimal versions
      run: cargo minimal-versions check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Test documentation examples
      run: cargo test --doc --all-features
